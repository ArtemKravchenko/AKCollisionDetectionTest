				CLASSES THAT NEED TO BE TESTED
1.) AKPhysicsUtils
2.) AKGeometricUtils
3.) AKPriorityQueue
4.) AKCollisionDetectionLogic
				DESCRIPTION FOR IMPLEMENTATION (TEST DATA)
	
1.1) changeParticlePlaceInTime: // FORMULA: OUTPUT(time) = center + velocity * (time - localTime)
	INPUT: center(1,1), velocity(1, 1), localTime(0), time(1)					OUTPUT: center(2,2)
	INPUT: center(25,15), velocity(8, 17), localTime(10), time(32)				OUTPUT: center(201,389)
	INPUT: center(152,83), velocity(47, 71) localTime(51), time(84) 			OUTPUT: center(1703,2426)
1.2) changeParticleVelocityAfterCollisionWithAnotherParticle // FORMULA: OUTPUT1(v1,d1,d2,m1,m2) = v1 + (2*m2*(v2 - v1)*(d2-d1)/(m1+m2)*(d2-d1)*(d2-d1))
								         								 OUTPUT2(v2,d1,d2,m1,m2) = v2 - (2*m1*(v2 - v1)*(d2-d1)/(m1+m2)*(d2-d1)*(d2-d1))
	INPUT: v1(1,1), v2(1,1), d1(51,51), d2(1,1), m1(1), m2(1)					OUTPUT1: v1(1,1) OUTPUT2: v2(1,1)						
	INPUT: v1(15,83), v2(17,48), d1(47,105), d2(72,53), m1(10), m2(15)			OUTPUT1: v1(31.8..., 48.0...) OUTPUT2: v2(5.7..., 71.3...)
	INPUT: v1(105,383), v2(217,148), d1(487,305), d2(720,153), m1(60), m2(105)	OUTPUT1: v1(247.54,83.9) OUTPUT2: v2(135.54,318.9)			
1.3) changeParticleVelocityAfterCollisionWithBound // FORMULA: OUTPUT(v, n) = v - 2*n(v*n)
	INPUT: v(1,1), n(0, 1)														OUTPUT: v(1, -1)
	INPUT: v(-10,20), n(0, 0)													OUTPUT: v(10, 20)
	INPUT: v(15,38), n(1, 1)													OUTPUT: v(-15, 38)
	INPUT: v(90,-61), n(1, 0)													OUTPUT: v(90, 61)
/---------------------------------------------------------------/
2.1) getTimeToCollisionBetweenTwoParticles // FORMULA: CAN SKIP IF CLEAR REVIEW FORMULA

2.2) getTimeToCollisionBetweenParticleAndBound // FORMULA: CAN SKIP IF CLEAR REVIEW FORMULA

/---------------------------------------------------------------/
3.1) less 						// INITIAL VALUES [5, 13, 87, 27, 21, 61]
	INPUT: (2), (1)																OUTPUT: false
	INPUT: (5), (2)																OUTPUT: false
	INPUT: (4), (6)																OUTPUT: true
	INPUT: (4), (2)																OUTPUT: false
	INPUT: (1), (3)																OUTPUT: true
	
3.2) exch 						// CAN SKIP IF CLEAR REVIEW FORMULA
	
3.3) swim 						// INITIAL VALUES [5, 13, 87, 27, 21, 61] (1,2,3,4,5,6)
	INPUT: (3)																	OUTPUT: [5, 13, 87, 27, 21, 61]
	INPUT: (5)																	OUTPUT: [5, 13, 87, 27, 21, 61]
	INPUT: (4)																	OUTPUT: [5, 13, 87, 27, 21, 61]
3.4) sink 						// INITIAL VALUES [5, 13, 87, 27, 21, 61] (1,2,3,4,5,6)
	INPUT: (4)																	OUTPUT: [5, 13, 87, 27, 21, 61]
	INPUT: (6)																	OUTPUT: [5, 13, 87, 27, 21, 61]
	INPUT: (5)																	OUTPUT: [5, 13, 87, 27, 21, 61]
	INPUT: (3)																	OUTPUT: [5, 13, 61, 27, 21, 87]
	INPUT: (2)																	OUTPUT: [5, 13, 61, 27, 21, 87]
	INPUT: (3)																	OUTPUT: [5, 13, 61, 27, 21, 87]
3.5) deleteElement 				// INITIAL VALUES [5, 13, 87, 27, 21, 61] (1,2,3,4,5,6)
	INPUT: (4)																	OUTPUT: [5, 13, 87, 61, 21, 0]
	INPUT: (1)																	OUTPUT: [13, 21, 87, 61, 0, 0]
	INPUT: (3)																	OUTPUT: [13, 21, 61, 0, 0, 0]
3.6) insert						// INITIAL VALUES [5, 13, 87, 27, 21, 61] (1,2,3,4,5,6)
	INPUT: (14)																	OUTPUT: [5, 13, 14, 27, 21, 61, 87]
	INPUT: (102)                                                                OUTPUT: [5, 13, 14, 27, 21, 61, 87, 102]
	INPUT: (73)                                                                 OUTPUT: [5, 13, 14, 27, 21, 61, 87, 102, 73]
3.7) delMin 					// INITIAL VALUES [5, 13, 87, 27, 21, 61] (1,2,3,4,5,6)
	INPUT: ()																	OUTPUT: [13, 21, 87, 27, 61, 0]
	INPUT: ()                                                                	OUTPUT: [21, 27, 87, 61, 0, 0]
	INPUT: ()                                                                	OUTPUT: [27, 61, 87, 0, 0, 0]
3.8) deleteElement				// INITIAL VALUES [5, 13, 87, 27, 21, 61] (1,2,3,4,5,6) // JUST NEED CLEARLY REVIEW CODE OF FORMULA

3.9) deleteElementForParticle	// INITIAL VALUES [5, 13, 87, 27, 21, 61] (1,2,3,4,5,6) // JUST NEED CLEARLY REVIEW CODE OF FORMULA

/---------------------------------------------------------------/
4.1) fillNeighborsForCell		// INPUT VALUES row = 5, col = 6	
	INPUT: (10)																	OUTPUT: [16,17,11,5]
	INPUT: (13)																	OUTPUT: [19,20,14,8]
	INPUT: (1)																	OUTPUT: [7,8,2,-1]
	INPUT: (29)																	OUTPUT: [-1,-1,-1,-1]
	INPUT: (24)																	OUTPUT: [-1,-1,25,19]
	INPUT: (0)																	OUTPUT: [6,7,1,-1]
	INPUT: (5)																	OUTPUT: [11,-1,-1,-1]
	INPUT: (20)																	OUTPUT: [26,27,21,15]
	INPUT: (6)																	OUTPUT: [12,13,7,1]
4.2) indexOfCellForParticle		// INPUT VALUES cellWidth = 150, cellHeight = 130
	INPUT: (370,156)															OUTPUT: 8
	INPUT: (829,412)															OUTPUT: 23
	INPUT: (471,34)																OUTPUT: 3
	INPUT: (61,0)																OUTPUT: 0
	INPUT: (511,351)															OUTPUT: 15
4.3) getEvent // between particle and particle 	// NOTHING TO TEST
	
4.4) getEvent // between particle and bound		// NOTHING TO TEST

4.5) nextEventFromListEvents					// NEED TO CLEARLY REVIEW CODE OF METHOD

4.6) updateParticlesLocation					// NEED TO CLEARLY REVIEW

4.7) addEventsForParticleAndParticlesInCurrentCell		// NEED TO CLEARLY REVIEW

4.8) addEventsForParticleAndParticlesInNeighborCells 	// NEED TO CLEARLY REVIEW

4.9) handleParticleToParticleCollisionEvent				// NEED TO CLEARLY REVIEW 

4.10) handleParticleToBoundCollisionEvent				// NEED TO CLEARLY REVIEW

4.11) handleParticleLeftCellCollisionEvent				// NEED TO CLEARLY REVIEW

4.12) removeEventsForParticle							// NEED TO CLEARLY REVIEW

4.13) addEventsRelatedToParticle						// NEED TO CLEARLY REVIEW

4.14) isEventContainsParticle							// NEED TO CLEARLY REVIEW

4.15) fillEventsInQueue									// NEED TO CLEARLY REVIEW

4.16) updateEventQueueInTime							// NEED TO CLEARLY REVIEW

4.17) setParticlesList									// NEED TO CLEARLY REVIEW

4.18) setBound											// NEED TO CLEARLY REVIEW

	